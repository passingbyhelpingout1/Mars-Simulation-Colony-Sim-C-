name: Determinism
on: [push, pull_request]

jobs:
  linux:
    runs-on: ubuntu-latest
    outputs:
      hash: ${{ steps.hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Build (GCC)
        run: g++ -std=c++17 -O2 -Wall -Wextra -Isrc -o mars mars_colony.cpp
      - name: Make sample replay using the game itself
        run: |
          mkdir -p data
          ./mars --record data/sample.repl --hours 1
      - name: Run replay & capture hash
        id: hash
        shell: bash
        run: |
          OUT=$(./mars --replay data/sample.repl --hours 500 --hash-only || true)
          HASH=$(printf "%s\n" "$OUT" | sed -n 's/^STATE_HASH=//p' | head -n1)
          if [ -z "$HASH" ]; then
            echo "Game output:"
            echo "$OUT"
            echo "ERROR: STATE_HASH not found"
            exit 1
          fi
          echo "hash=$HASH" >> "$GITHUB_OUTPUT"

  windows:
    runs-on: windows-latest
    outputs:
      hash: ${{ steps.hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4
      - name: MSVC Dev Cmd
        uses: ilammy/msvc-dev-cmd@v1
        with: { arch: x64 }
      - name: Build (MSVC)
        shell: cmd
        run: cl /nologo /EHsc /std:c++17 /O2 /W4 /I src /Fe:mars.exe mars_colony.cpp
      - name: Make sample replay using the game itself
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path data | Out-Null
          .\mars.exe --record data\sample.repl --hours 1
      - name: Run replay & capture hash
        id: hash
        shell: pwsh
        run: |
          $out  = & .\mars.exe --replay data\sample.repl --hours 500 --hash-only
          $line = $out | Select-String -Pattern '^STATE_HASH=' | Select-Object -First 1
          if ($null -eq $line) {
            Write-Host "Game output:`n$out"
            throw "STATE_HASH not found"
          }
          $hash = $line.Line.Split('=')[1]
          "hash=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  compare:
    needs: [linux, windows]
    runs-on: ubuntu-latest
    steps:
      - name: Check equality
        run: |
          echo "linux:   ${{ needs.linux.outputs.hash }}"
          echo "windows: ${{ needs.windows.outputs.hash }}"
          test "${{ needs.linux.outputs.hash }}" = "${{ needs.windows.outputs.hash }}"
