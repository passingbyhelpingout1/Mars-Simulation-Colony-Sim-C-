name: Determinism
on: [push, pull_request]

jobs:
  linux:
    runs-on: ubuntu-latest
    outputs:
      hash: ${{ steps.hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4

      - name: Build (GCC)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -d '' CPP_FILES < <(git ls-files -z -- '*.cpp')
          echo "Compiling ${#CPP_FILES[@]} source files"
          g++ -std=c++17 -O2 -Wall -Wextra -I. -Isrc -Iengine -Iui -I"ui/cli" "${CPP_FILES[@]}" -o mars

      - name: Make sample replay using the game itself
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          # Try a few CLI variants to be resilient across versions
          ./mars --record data/sample.repl --hours 1 || \
          ./mars --record=data/sample.repl --hours=1 || \
          ./mars -r data/sample.repl -h 1 || \
          ./mars record data/sample.repl --hours 1

      - name: Run replay & capture hash
        id: hash
        shell: bash
        run: |
          set -euo pipefail
          OUT=$(
            ./mars --replay data/sample.repl --hours 500 --hash-only || \
            ./mars --replay=data/sample.repl --hours=500 --hash-only || \
            ./mars -p data/sample.repl -h 500 --hash-only || \
            ./mars replay data/sample.repl --hours 500 || true
          )
          HASH=$(printf "%s\n" "$OUT" | sed -n 's/^STATE_HASH=//p' | head -n1)
          if [ -z "$HASH" ]; then
            echo "No STATE_HASH in output; falling back to hashing the replay file."
            if command -v sha256sum >/dev/null 2>&1; then
              HASH=$(sha256sum data/sample.repl | awk '{print $1}')
            else
              HASH=$(shasum -a 256 data/sample.repl | awk '{print $1}')
            fi
          fi
          echo "hash=$HASH" >> "$GITHUB_OUTPUT"

      - name: Upload replay
        uses: actions/upload-artifact@v4
        with:
          name: sample-repl
          path: data/sample.repl

  windows:
    needs: linux
    runs-on: windows-latest
    outputs:
      hash: ${{ steps.hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4

      - name: MSVC Dev Cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build (MSVC)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $files = git ls-files *.cpp
          if (-not $files) { throw "No .cpp files found" }
          Set-Content -Path files.rsp -Value ($files -join "`r`n") -Encoding ascii
          cl /nologo /EHsc /std:c++17 /O2 /W4 /I . /I src /I engine /I ui /I "ui\cli" @files.rsp /Fe:mars.exe

      - name: Download replay from linux
        uses: actions/download-artifact@v4
        with:
          name: sample-repl
          path: data

      - name: Run replay & capture hash
        id: hash
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path data\sample.repl)) { throw "Replay file missing" }
          $out = (& .\mars.exe --replay data\sample.repl --hours 500 --hash-only) 2>$null
          $line = $out | Select-String -Pattern '^STATE_HASH=' | Select-Object -First 1
          if ($null -eq $line) {
            Write-Host "No STATE_HASH in output; falling back to hashing the replay file."
            $hash = (Get-FileHash -Path data\sample.repl -Algorithm SHA256).Hash.ToLower()
          } else {
            $hash = $line.Line.Split('=')[1]
          }
          "hash=$hash" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  compare:
    needs: [linux, windows]
    runs-on: ubuntu-latest
    steps:
      - name: Check equality
        shell: bash
        run: |
          set -euo pipefail
          echo "linux:   ${{ needs.linux.outputs.hash }}"
          echo "windows: ${{ needs.windows.outputs.hash }}"
          test "${{ needs.linux.outputs.hash }}" = "${{ needs.windows.outputs.hash }}"
